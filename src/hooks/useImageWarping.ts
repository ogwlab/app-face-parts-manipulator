import { useEffect, useCallback, useRef } from 'react';
import * as fabric from 'fabric';
import { useFaceStore } from '../stores/faceStore';
import { canvasManager } from '../features/image-warping/canvasManager';
import { applyFaceWarping } from '../features/image-warping/warpingUtils';

export interface UseImageWarpingReturn {
  initializeCanvas: (canvasElement: HTMLCanvasElement, width?: number, height?: number) => void;
  processImage: () => Promise<void>;
  exportImage: () => string | null;
  isProcessing: boolean;
  error: string | null;
}

export const useImageWarping = (): UseImageWarpingReturn => {
  const {
    originalImage,
    faceDetection,
    faceParams,
    setProcessedImageUrl,
    setProcessing,
    setError,
  } = useFaceStore();

  const isProcessingRef = useRef(false);
  const originalFabricImage = useRef<fabric.Image | null>(null);

  // CanvasÂàùÊúüÂåñ
  const initializeCanvas = useCallback((canvasElement: HTMLCanvasElement, width?: number, height?: number) => {
    try {
      console.log('üé® CanvasÂàùÊúüÂåñÈñãÂßã:', { 
        canvasElement: !!canvasElement, 
        width, 
        height,
        elementWidth: canvasElement?.width,
        elementHeight: canvasElement?.height
      });
      
      canvasManager.initialize(canvasElement, width, height);
      
      console.log('‚úÖ CanvasÂàùÊúüÂåñÊàêÂäü:', {
        canvas: !!canvasManager.canvas,
        size: width ? `${width}x${height}` : '„Éá„Éï„Ç©„É´„Éà',
        canvasWidth: canvasManager.canvas?.getWidth(),
        canvasHeight: canvasManager.canvas?.getHeight()
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'CanvasÂàùÊúüÂåñ„Ç®„É©„Éº';
      setError(errorMessage);
      console.error('‚ùå CanvasÂàùÊúüÂåñÂ§±Êïó:', error);
    }
  }, [setError]);

  // ÁîªÂÉèË™≠„ÅøËæº„Åø
  const loadOriginalImage = useCallback(async () => {
    if (!originalImage || !canvasManager.canvas) return;

    try {
      setProcessing(true);
      setError(null);

      const fabricImage = await canvasManager.loadImage(originalImage.url);
      originalFabricImage.current = fabricImage;
      
      console.log('‚úÖ Original image loaded to canvas');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'ÁîªÂÉèË™≠„ÅøËæº„Åø„Ç®„É©„Éº';
      setError(errorMessage);
      console.error('‚ùå Image loading failed:', error);
    } finally {
      setProcessing(false);
    }
  }, [originalImage, setProcessing, setError]);

  // ÁîªÂÉèÂá¶ÁêÜÔºà„ÉØ„Éº„Éî„É≥„Ç∞ÈÅ©Áî®Ôºâ
  const processImage = useCallback(async () => {
    if (
      !originalFabricImage.current ||
      !faceDetection ||
      !faceDetection.landmarks ||
      isProcessingRef.current
    ) {
      console.log('‚ö†Ô∏è „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜ„Çπ„Ç≠„ÉÉ„Éó - ÂâçÊèêÊù°‰ª∂‰∏çË∂≥');
      return;
    }

    try {
      isProcessingRef.current = true;
      setProcessing(true);
      setError(null);

      console.log('üîÑ „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜÈñãÂßã', faceParams);

      // „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜ„ÇíÈÅ©Áî®
      const warpedImage = applyFaceWarping(
        originalFabricImage.current,
        faceDetection.landmarks,
        faceParams
      );

      // Canvas„ÇíÊõ¥Êñ∞
      canvasManager.updateImage(warpedImage);

      // Âá¶ÁêÜÂæå„ÅÆÁîªÂÉèURL„ÇíÁîüÊàê
      const processedDataURL = canvasManager.getCanvasDataURL();
      setProcessedImageUrl(processedDataURL);

      console.log('‚úÖ „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜÂÆå‰∫Ü');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'ÁîªÂÉèÂá¶ÁêÜ„Ç®„É©„Éº';
      setError(errorMessage);
      console.error('‚ùå „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜÂ§±Êïó:', error);
    } finally {
      isProcessingRef.current = false;
      setProcessing(false);
    }
  }, [faceDetection, faceParams, setProcessedImageUrl, setProcessing, setError]);

  // ÁîªÂÉè„Ç®„ÇØ„Çπ„Éù„Éº„Éà
  const exportImage = useCallback((): string | null => {
    try {
      return canvasManager.getCanvasDataURL();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'ÁîªÂÉè„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº';
      setError(errorMessage);
      console.error('‚ùå Image export failed:', error);
      return null;
    }
  }, [setError]);

  // ÂÖÉÁîªÂÉè„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
  useEffect(() => {
    if (originalImage) {
      loadOriginalImage();
    } else {
      // ÁîªÂÉè„Åå„ÇØ„É™„Ç¢„Åï„Çå„ÅüÂ†¥Âêà
      originalFabricImage.current = null;
      setProcessedImageUrl(null);
    }
  }, [originalImage, loadOriginalImage, setProcessedImageUrl]);

  // È°î„Éë„É©„É°„Éº„Çø„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜÔºà„Éá„Éê„Ç¶„É≥„Çπ‰ªò„ÅçÔºâ
  useEffect(() => {
    console.log('üéõÔ∏è „Éë„É©„É°„Éº„ÇøÂ§âÊõ¥Ê§úÂá∫ - Ë©≥Á¥∞„É≠„Ç∞:', {
      faceParams,
      hasOriginalImage: !!originalFabricImage.current,
      hasFaceDetection: !!faceDetection,
      hasLandmarks: !!(faceDetection && faceDetection.landmarks),
      canvasManager: !!canvasManager.canvas
    });

    if (originalFabricImage.current && faceDetection && faceDetection.landmarks) {
      console.log('‚úÖ ÂâçÊèêÊù°‰ª∂Ê∫Ä„Åü„Åó„Å¶„ÅÑ„Çã - „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜÂÆüË°å‰∫àÂÆö');
      
      // Â∞ë„ÅóÈÅÖÂª∂„ÇíÂÖ•„Çå„Å¶UI„ÅÆÂøúÁ≠îÊÄß„Çí‰øù„Å§
      const timeoutId = setTimeout(() => {
        console.log('‚è∞ „Éá„Éê„Ç¶„É≥„ÇπÂÆå‰∫Ü - „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜÈñãÂßã');
        processImage();
      }, 100);

      return () => {
        console.log('üö´ „Éá„Éê„Ç¶„É≥„Çπ„Ç≠„É£„É≥„Çª„É´');
        clearTimeout(timeoutId);
      };
    } else {
      console.log('‚ùå ÂâçÊèêÊù°‰ª∂‰∏çË∂≥ - „ÉØ„Éº„Éî„É≥„Ç∞Âá¶ÁêÜ„Çπ„Ç≠„ÉÉ„Éó');
    }
  }, [faceParams, processImage, faceDetection]);

  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    return () => {
      canvasManager.dispose();
    };
  }, []);

  return {
    initializeCanvas,
    processImage,
    exportImage,
    isProcessing: isProcessingRef.current,
    error: null, // „Ç®„É©„Éº„ÅØstore„ÅßÁÆ°ÁêÜ
  };
};